---
layout: post
title:  "crontab文件格式"
date:   2014-12-11 00:00:00
categories: linux
tags: crontab
---

公司里有一个内部技术项目，一个计划任务(crontab)后台。我们知道，传统的crontab做法是将程序上线到指定的cron机上，然后登录到该机器上编辑crontab文件设定计划任务，还可能有一些辅助的脚本用来收集命令运行结果和日志。

这种做法很不方便，上线、编辑crontab、收集结果和日志。不同的项目组都有各自的计划任务，很快cron机上/etc/crontab就变得乱糟糟的。为了结束这种情况，网页版计划任务后台诞生了，开发人员可以从这个后台上提交计划任务，至于命令是在哪一台服务器上运行、日志、报警这些都不用自己做，后台有统一的方式来做日志收集和报警监测。

整个开发过程中，我觉得最有意思的是crontab文件的解析，为了写好这个解析模块，让它具有足够的兼容性和健壮性，我在网上看了很多资料，发现大部分都语焉不详，因此有必要将我的整理结果记录下来。

## CRONTAB文件格式 ##

这是linux中/etc/crontab中自带的注释:

    # .---------------- minute (0 - 59)
    # |  .------------- hour (0 - 23)
    # |  |  .---------- day of month (1 - 31)
    # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
    # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
    # |  |  |  |  |
    # *  *  *  *  * user-name command to be executed

/etc/crontab文件每行由下列字段组成: 

    minute hour day month weekday user-name command

/etc/crontab文件共有7列，前5列设置命令运行的时间：分、时、日、月、周；第6列user-name设置命令以哪个用户去执行；第7列command是可以执行的命令，可以是shell命令、脚本或者一个binary程序。

* minute    分     range:0-59

* hour      时     range:0-23

* day       日     range:1-31

* month     月     range:1-12

* weekday   周     range:0-7  (0和7都代表周日)

时间的5个部分，每个部分都是由单个的子部或者由逗号分隔的多个子部构成，逗号分隔的子部之间是或的关系
子部可能是以下5种pattern之一：

    *           (表示range中的每一个有效值组成的序列)
    m-n         (m<=n，m和n都在range内；表示从m到n这个时间区间段每一个有效值组成的序列)
    d           (d在range内；表示时间为d的单值)
    */k         (k>=1；表示自*这个区间第一个有效值开始，每隔k个值取一值，直到不超过*的最后一个有效值；取到一个时间序列)
    m-n/k       (k>=1，m<=n；表示自m开始，每隔k个值取一值，直到不超过n；取到一个时间序列)

不支持59-1这样的表达。

### 月和周的关系 ###

如果日域(day)和周域(weekday)都有值，则这两个域都有效，是或的关系。否则，是且的关系。“有值”的含义是该字段不为“\*”

例如

    15 10 */2 * 1 root php --vesion # 表示在每个月的奇数日或者每个星期一的10:15分以root身份运行php --version命令
    
    0 0 * * 0,2,4 root /bin/sh /root/backup.sh   # 表示在每个周日、周二、周四的00:00运行备份脚本

### 一些例子 ###

    *
    d
    d,d,d
    *,*
    m-n[,m-n]
    */k[,*/k]
    m-n/k[,m-n/k]     # 从m开始数，例如1-10/3，有效的值为1、4、7、10

